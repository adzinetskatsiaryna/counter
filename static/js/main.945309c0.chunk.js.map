{"version":3,"sources":["button.module.css","logo.svg","counter.module.css","input.module.css","Button.js","Buttons.js","Display.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","render","type","value","props","disabled","onClick","className","counter","React","Component","Buttons","buttonAddDisebled","onSet","maxValue","buttonResetDisebled","minValue","disebledStyleAdd","styles","button","disebledStyleReset","buttonWrapper","addCounter","resetCounter","Display","name","ErrorMinValue","ErrorMaxValue","styleMaxValue","spanCounter","Input","inputWrapper","title","onFocus","set","onChange","App","state","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","setState","setMaxValue","e","Number","currentTarget","setMinValue","setChange","DisabledSet","errorInput","this","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.945309c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__3Xi1m\",\"buttonWrapper\":\"button_buttonWrapper__5cxKD\",\"disabled\":\"button_disabled__3VT1m\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"counter_counter__1O_ON\",\"spanCounter\":\"counter_spanCounter__Ua7gx\",\"maxValue\":\"counter_maxValue__3WK62\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"input_inputWrapper__157by\",\"title\":\"input_title__2t1Et\"};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport classes from './button.module.css'\n\n\n\n\nclass Button extends React.Component {\n\n\n    render = () => {\n        return (\n            <input\n                type='button'\n                value={this.props.value}\n                disabled={this.props.disabled}\n                onClick={this.props.onClick}\n                className={this.props.className}\n                counter={this.props.counter}\n            />\n        );\n    }\n}\n\nexport default Button;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styles from './button.module.css'\nimport Button from \"./Button\";\n\n\n\n\nclass Buttons extends React.Component {\n\n\n    render = () => {\n\n        //если onSet===false или значение счетчика равно максиммум или минимум, тогда кнопка задизейблена\n        let buttonAddDisebled = this.props.onSet===false || this.props.counter===this.props.maxValue;\n        let buttonResetDisebled = this.props.onSet===false || this.props.counter === this.props.minValue;\n\n        //стили для задизейбленных кнопок\n        let disebledStyleAdd = buttonAddDisebled ? styles.disabled : styles.button;\n        let disebledStyleReset = buttonResetDisebled ? styles.disabled : styles.button;\n        return (\n            <div className={styles.buttonWrapper}>\n                    <Button onClick={this.props.addCounter} disabled={buttonAddDisebled} value={'ADD'} className={disebledStyleAdd} />\n                    <Button onClick={this.props.resetCounter} disabled={buttonResetDisebled} value={\"RESET\"} className={disebledStyleReset}/>\n            </div>\n        );\n    }\n}\n\nexport default Buttons;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styles from './counter.module.css'\n\n\nclass Display extends React.Component {\n\n\n    render = () => {\n\n        //значение счетчика на экране при некорректном вводе 'Incorrect value' при onSet === false (до сета) - 'Enter value end press set', или значение счетчика\n        let name = (this.props.ErrorMinValue && this.props.ErrorMaxValue && 'Incorrect value') || (this.props.onSet === false && 'Enter value end press set') || this.props.counter;\n\n        //стиль для некорректного ввода и для максимального значения счетчика\n        let styleMaxValue = this.props.counter === this.props.maxValue || this.props.ErrorMaxValue || this.props.ErrorMinValue ? styles.maxValue : styles.spanCounter;\n\n        return (\n            <div className={styles.counter}>\n                <span className={styleMaxValue}>{name}</span>\n            </div>\n        );\n    }\n}\n\nexport default Display;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styles from './input.module.css'\n\n\n\n\nclass Input extends React.Component {\n\n\n    render = () => {\n        return (\n            <div className={styles.inputWrapper}>\n                <div className={styles.title}>{this.props.title}</div>\n                <input\n                    type='number'\n                    value={this.props.value}\n                    onFocus={this.props.set}\n                    // autoFocus={true}\n                    onChange={this.props.set}\n                    className={this.props.className}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Input;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Buttons from \"./Buttons\";\nimport Display from \"./Display\";\nimport Button from \"./Button\";\nimport styles from \"./button.module.css\";\nimport Input from \"./Input\";\n\n\nclass App extends React.Component {\n\n    state = {\n        counter: 0,\n        maxValue: 5,\n        minValue: 0,\n        onSet: false,\n    };\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('state', stateAsString)\n    };\n\n    restoreState = () => {\n        let stateAsString = localStorage.getItem('state');\n        if (stateAsString) {\n            let state = JSON.parse(stateAsString);\n            this.setState(state)\n        }\n\n    };\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n\n//получаем значение инпута и устанавливаем его maxValue, через изменение стейта\n\n    setMaxValue = (e) => {\n        this.setState({\n            maxValue: Number(e.currentTarget.value),\n            onSet: false,\n        }, this.saveState)\n    };\n\n//получаем значение инпута и утонавливаем его MinValue\n\n    setMinValue = (e) => {\n        this.setState({\n            minValue: Number(e.currentTarget.value),\n            onSet: false,\n        }, this.saveState)\n    };\n\n//сетаем выбранные значения в счетчик\n\n    setChange = () => {\n        this.setState({\n            counter: this.state.minValue,\n            onSet: true,\n        }, this.saveState)\n    };\n\n//изменяем счетчик, если значение счетчика меньше максимального увеличиваем счетчик на один\n\n    addCounter = () => {\n        if (this.state.counter < this.state.maxValue) {\n            this.setState({\n                counter: this.state.counter + 1\n            }, this.saveState)\n        }\n    };\n\n//сброс счетчика, устанавливаем значение счетчика = minValue\n\n    resetCounter = () => {\n        this.setState({\n            counter: this.state.minValue\n        })\n    };\n\n\n    render = () => {\n        debugger\n        //проверяем минимальное и максимальное значения на отрицательные, равные друг другу, минимальное не должно быть больше максимального\n\n        let ErrorMaxValue = this.state.maxValue < 0 || this.state.maxValue <= this.state.minValue;\n        let ErrorMinValue = this.state.minValue < 0 || this.state.minValue >= this.state.maxValue;\n\n        //переменная для создания стиля для задизейбленной кнопки\n        let DisabledSet = ErrorMinValue || ErrorMaxValue || this.state.onSet === true ? styles.disabled : styles.button;\n\n        //переменная для инпутов с некорректными данными\n        let errorInput = (ErrorMaxValue || ErrorMinValue) ? 'error' : '';\n        return (\n            <div className='App'>\n                <div className='settings'>\n                    <Input title={'max value'}\n                           value={this.state.maxValue}\n                           set={this.setMaxValue}\n                           className={errorInput}\n                    />\n                    <Input title={'min value'}\n                           value={this.state.minValue}\n                           set={this.setMinValue}\n                           className={errorInput}\n                    />\n\n                    <Button\n                        value={'SET'}\n                        className={DisabledSet}\n                        onClick={this.setChange}\n                        counter={this.state.counter}\n                        disabled={(this.state.onSet === true || ErrorMaxValue || ErrorMinValue)}\n                    />\n                </div>\n                <div className='display'>\n                    <Display\n                        counter={this.state.counter}\n                        maxValue={this.state.maxValue}\n                        minValue={this.state.minValue}\n                        onSet={this.state.onSet}\n                        ErrorMaxValue={ErrorMaxValue}\n                        ErrorMinValue={ErrorMinValue}\n                    />\n\n                    <Buttons\n                        className='buttonWrapper'\n                        addCounter={this.addCounter}\n                        resetCounter={this.resetCounter}\n                        counter={this.state.counter}\n                        maxValue={this.state.maxValue}\n                        minValue={this.state.minValue}\n                        onSet={this.state.onSet}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}