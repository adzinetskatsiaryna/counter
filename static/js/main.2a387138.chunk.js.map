{"version":3,"sources":["button.module.css","logo.svg","counter.module.css","input.module.css","Button.js","Buttons.js","Display.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","render","type","value","props","disabled","onClick","className","counter","React","Component","Buttons","buttonAddDisebled","onSet","maxValue","buttonResetDisebled","minValue","disebledStyleAdd","styles","button","disebledStyleReset","buttons","addCounter","resetCounter","Display","name","valueMaxMin","styleMaxValue","spanCounter","Input","inputWrapper","title","onFocus","set","onChange","App","state","setMaxValue","e","setState","currentTarget","setMinValue","setChange","ErrorMaxValue","ErrorMinValue","DisabledSet","errorInput","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a387138.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__3Xi1m\",\"buttons\":\"button_buttons__1yvpk\",\"disabled\":\"button_disabled__3VT1m\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"counter_counter__1O_ON\",\"spanCounter\":\"counter_spanCounter__Ua7gx\",\"maxValue\":\"counter_maxValue__3WK62\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"input_inputWrapper__157by\"};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport classes from './button.module.css'\n\n\n\n\nclass Button extends React.Component {\n\n\n    render = () => {\n        return (\n            <input\n                type='button'\n                value={this.props.value}\n                disabled={this.props.disabled}\n                onClick={this.props.onClick}\n                className={this.props.className}\n                counter={this.props.counter}\n            />\n        );\n    }\n}\n\nexport default Button;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styles from './button.module.css'\nimport Button from \"./Button\";\n\n\n\n\nclass Buttons extends React.Component {\n\n\n    render = () => {\n\n        let buttonAddDisebled = this.props.onSet===false || this.props.counter===this.props.maxValue;\n        let buttonResetDisebled = this.props.onSet===false || this.props.counter === this.props.minValue;\n        let disebledStyleAdd = buttonAddDisebled ? styles.disabled : styles.button;\n        let disebledStyleReset = buttonResetDisebled ? styles.disabled : styles.button;\n        return (\n            <div className={styles.buttons}>\n                    <Button onClick={this.props.addCounter} disabled={buttonAddDisebled} value={'ADD'} className={disebledStyleAdd} />\n                    <Button onClick={this.props.resetCounter} disabled={buttonResetDisebled} value={\"RESET\"} className={disebledStyleReset}/>\n            </div>\n        );\n    }\n}\n\nexport default Buttons;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styles from './counter.module.css'\n\n\n\nclass Display extends React.Component {\n\n\n    render = () => {\n\n        let name = (this.props.valueMaxMin && 'Incorrect value') || (this.props.onSet === false && 'Enter value end press set')|| this.props.counter;\n        let styleMaxValue = this.props.counter===this.props.maxValue || this.props.valueMaxMin  ? styles.maxValue : styles.spanCounter;\n        return (\n            <div className={styles.counter}>\n                   <span className={styleMaxValue}>{name}</span>\n            </div>\n        );\n    }\n}\n\nexport default Display;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styles from './input.module.css'\n\n\n\n\nclass Input extends React.Component {\n\n\n    render = () => {\n        return (\n            <div className={styles.inputWrapper}>\n                <div>{this.props.title}</div>\n                <input\n                    type='number'\n                    value={this.props.value}\n                    onFocus={this.props.set}\n                    onChange={this.props.set}\n                    className={this.props.className}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Input;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Buttons from \"./Buttons\";\nimport Display from \"./Display\";\nimport Button from \"./Button\";\nimport styles from \"./button.module.css\";\nimport Input from \"./Input\";\n\n\n\nclass App extends React.Component {\n\nstate = {\n    counter:0,\n    maxValue:0,\n    minValue: 0,\n    onSet: false,\n};\n\nsetMaxValue = (e)=>{\n    this.setState({maxValue: e.currentTarget.value,\n                    onSet: false,\n    })\n};\n\nsetMinValue = (e)=>{\n    this.setState({\n        minValue: e.currentTarget.value,\n        onSet: false,\n    })\n};\n\nsetChange = ()=>{\n    this.setState({\n        counter: this.state.minValue,\n        onSet: true,\n    })\n}\n\naddCounter =()=>{\n        if(this.state.counter < this.state.maxValue){\n    this.setState({\n        counter:++this.state.counter\n    })}\n};\nresetCounter=()=>{\n    this.setState({\n        counter: this.state.minValue\n    })\n};\n\n    render = () => {\n        let ErrorMaxValue = this.state.maxValue < 0 || this.state.maxValue <= this.state.minValue;\n        let ErrorMinValue = this.state.minValue < 0 || this.state.minValue >= this.state.maxValue;\n        let DisabledSet = ErrorMinValue || ErrorMaxValue || this.state.onSet===true ? styles.disabled : styles.button;\n        let errorInput = (ErrorMaxValue || ErrorMinValue) ? 'error' : '';\n        return (\n            <div className='App'>\n                <div className='settings'>\n                    <Input title={'max value'}\n                            value={this.state.maxValue}\n                           set={this.setMaxValue}\n                           className = {errorInput}\n                    />\n                    <Input title={'min value'}\n                            value={this.state.minValue}\n                           set={this.setMinValue}\n                           className = {errorInput}\n                    />\n\n                    <Button\n                        value={'SET'}\n                        className={DisabledSet}\n                        onClick={this.setChange}\n                        counter={this.state.counter}\n                        disabled={(this.state.onSet===true || ErrorMaxValue || ErrorMinValue)}\n                    />\n                </div>\n                <div className='display'>\n                   <Display\n                       counter = {this.state.counter}\n                       maxValue = {this.state.maxValue}\n                       minValue = {this.state.minValue}\n                       onSet = {this.state.onSet}\n                       valueMaxMin={ErrorMaxValue || ErrorMinValue}\n                   />\n\n                   <Buttons\n                       addCounter ={this.addCounter}\n                       resetCounter = {this.resetCounter}\n                       counter = {this.state.counter}\n                       maxValue = {this.state.maxValue}\n                       minValue = {this.state.minValue}\n                       onSet={this.state.onSet}\n                   />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}